// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  STUDENT
  ADMIN
}

enum Violationlevel {
  MINOR
  DISRUPTIVE
  MODERATE
  SERIOUS
  MAJOR
}

enum UserCondeOfConductType {
  POSITIVE
  NEGATIVE
}

// AAKMS Models
model User {
  id                String              @id @default(uuid())
  nis               String              @unique
  pin               String              @db.VarChar()
  name              String              @db.VarChar(255)
  gender            String
  scores            Int                 @default(0)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @default(now())
  role              Role                @default(STUDENT)
  UserClass         UserClass[]
  UserCodeOfConduct UserCodeOfConduct[]
}

model UserClass {
  id            String   @id @default(uuid())
  name          String?  @db.VarChar(255)
  user          User     @relation(fields: [userId], references: [id])
  userId        String
  class         Class    @relation(fields: [classId], references: [id])
  classId       String
  educationYear String   @db.VarChar()
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())
}

model Class {
  id           String      @id @default(uuid())
  name         String      @unique
  grade        ClassGrade  @relation(fields: [classGradeId], references: [id])
  classGradeId String
  type         ClassType   @relation(fields: [classTypeId], references: [id])
  classTypeId  String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @default(now())
  UserClass    UserClass[]
}

model ClassGrade {
  id        String   @id @default(uuid())
  name      String   @unique
  Class     Class[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model ClassType {
  id        String   @id @default(uuid())
  name      String   @unique
  Class     Class[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model CodeOfConduct {
  id                  String              @id @default(uuid())
  name                CodeOfConductName   @relation(fields: [codeOfConductNameId], references: [id])
  codeOfConductNameId String
  type                CodeOfConductType   @relation(fields: [codeOfConductTypeId], references: [id])
  codeOfConductTypeId String
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @default(now())
  UserCodeOfConduct   UserCodeOfConduct[]
}

model CodeOfConductType {
  id            String          @id @default(uuid())
  name          String          @unique
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @default(now())
  CodeOfConduct CodeOfConduct[]
}

model CodeOfConductName {
  id            String          @id @default(uuid())
  name          String          @db.Text
  score         Int             @default(0)
  penalty       String?         @db.Text
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @default(now())
  CodeOfConduct CodeOfConduct[]
}

model UserCodeOfConduct {
  id              String                 @id @default(uuid())
  user            User                   @relation(fields: [userId], references: [id])
  userId          String
  codeOfConduct   CodeOfConduct?         @relation(fields: [codeOfConductId], references: [id])
  codeOfConductId String?
  reward          Reward?                @relation(fields: [rewardId], references: [id])
  rewardId        String?
  score           Int                    @default(0)
  type            UserCondeOfConductType @default(NEGATIVE)
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @default(now())
}

model Violation {
  id        String   @id @default(uuid())
  name      String   @unique
  min_score Int
  max_score Int
  action    String
  level     String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Reward {
  id                String              @id @default(uuid())
  name              String              @unique
  score             Int
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @default(now())
  UserCodeOfConduct UserCodeOfConduct[]
}
